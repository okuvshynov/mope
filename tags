!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Python	nameref	/the original name for the tag/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Python	I,namespace	/name referring a module defined in other file/
!_TAG_KIND_DESCRIPTION!Python	Y,unknown	/name referring a class\/variable\/function\/module defined in other module/
!_TAG_KIND_DESCRIPTION!Python	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Python	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Python	i,module	/modules/
!_TAG_KIND_DESCRIPTION!Python	m,member	/class members/
!_TAG_KIND_DESCRIPTION!Python	v,variable	/variables/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PARSER_VERSION!Python	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/oleksandr/projects/mope/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	//
!_TAG_ROLE_DESCRIPTION!Python!module	imported	/imported modules/
!_TAG_ROLE_DESCRIPTION!Python!module	indirectlyImported	/module imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Python!module	namespace	/namespace from where classes\/variables\/functions are imported/
!_TAG_ROLE_DESCRIPTION!Python!unknown	imported	/imported from the other module/
!_TAG_ROLE_DESCRIPTION!Python!unknown	indirectlyImported	/classes\/variables\/functions\/modules imported in alternative name/
1. Basic POC (`expert_parallel_poc.py`)	README.md	/^### 1. Basic POC (`expert_parallel_poc.py`)$/;"	S	section:Expert Parallelism for MLX-LM MoE Models""Implementation
1. Load Balancing	README.md	/^### 1. Load Balancing$/;"	S	section:Expert Parallelism for MLX-LM MoE Models""Challenges and Solutions
2. Communication Overhead	README.md	/^### 2. Communication Overhead$/;"	S	section:Expert Parallelism for MLX-LM MoE Models""Challenges and Solutions
2. Real Model Integration (`qwen3_expert_parallel.py`)	README.md	/^### 2. Real Model Integration (`qwen3_expert_parallel.py`)$/;"	S	section:Expert Parallelism for MLX-LM MoE Models""Implementation
3. Memory Management	README.md	/^### 3. Memory Management$/;"	S	section:Expert Parallelism for MLX-LM MoE Models""Challenges and Solutions
3. Model Analysis (`model_analysis.py`)	README.md	/^### 3. Model Analysis (`model_analysis.py`)$/;"	S	section:Expert Parallelism for MLX-LM MoE Models""Implementation
4. Fault Tolerance	README.md	/^### 4. Fault Tolerance$/;"	S	section:Expert Parallelism for MLX-LM MoE Models""Challenges and Solutions
Advanced Routing	README.md	/^### Advanced Routing$/;"	S	section:Expert Parallelism for MLX-LM MoE Models""Future Work
Architecture Analysis	README.md	/^## Architecture Analysis$/;"	s	chapter:Expert Parallelism for MLX-LM MoE Models
Basic POC	README.md	/^### Basic POC$/;"	S	section:Expert Parallelism for MLX-LM MoE Models""Running the Code
Challenges and Solutions	README.md	/^## Challenges and Solutions$/;"	s	chapter:Expert Parallelism for MLX-LM MoE Models
Communication Pattern	README.md	/^### Communication Pattern$/;"	S	section:Expert Parallelism for MLX-LM MoE Models""Technical Implementation Details
Conclusion	README.md	/^## Conclusion$/;"	s	chapter:Expert Parallelism for MLX-LM MoE Models
Distributed Implementation	README.md	/^### Distributed Implementation$/;"	S	section:Expert Parallelism for MLX-LM MoE Models""Future Work
Expert Distribution Strategy	README.md	/^### Expert Distribution Strategy$/;"	S	section:Expert Parallelism for MLX-LM MoE Models""Technical Implementation Details
Expert Parallelism for MLX-LM MoE Models	README.md	/^# Expert Parallelism for MLX-LM MoE Models$/;"	c
ExpertGroup	expert_parallel_poc.py	/^class ExpertGroup:$/;"	c
ExpertParallelModel	expert_parallel_poc.py	/^class ExpertParallelModel(nn.Module):$/;"	c
ExpertParallelQwen3MoeSparseMoeBlock	qwen3_expert_parallel.py	/^class ExpertParallelQwen3MoeSparseMoeBlock(nn.Module):$/;"	c
Files	README.md	/^## Files$/;"	s	chapter:Expert Parallelism for MLX-LM MoE Models
Future Work	README.md	/^## Future Work$/;"	s	chapter:Expert Parallelism for MLX-LM MoE Models
Implementation	README.md	/^## Implementation$/;"	s	chapter:Expert Parallelism for MLX-LM MoE Models
Key Results	README.md	/^## Key Results$/;"	s	chapter:Expert Parallelism for MLX-LM MoE Models
License	README.md	/^## License$/;"	s	chapter:Expert Parallelism for MLX-LM MoE Models
Load Balancing Analysis	README.md	/^### Load Balancing Analysis$/;"	S	section:Expert Parallelism for MLX-LM MoE Models""Key Results
Memory Distribution	README.md	/^### Memory Distribution$/;"	S	section:Expert Parallelism for MLX-LM MoE Models""Key Results
Model Architecture Analysis	README.md	/^### Model Architecture Analysis$/;"	S	section:Expert Parallelism for MLX-LM MoE Models""Running the Code
Multi-Node (8 nodes × 8 GPUs)	README.md	/^### Multi-Node (8 nodes × 8 GPUs)$/;"	S	section:Expert Parallelism for MLX-LM MoE Models""Performance Projections
Overview	README.md	/^## Overview$/;"	s	chapter:Expert Parallelism for MLX-LM MoE Models
ParallelMoELayer	expert_parallel_poc.py	/^class ParallelMoELayer(nn.Module):$/;"	c
Performance Characteristics	README.md	/^### Performance Characteristics$/;"	S	section:Expert Parallelism for MLX-LM MoE Models""Key Results
Performance Projections	README.md	/^## Performance Projections$/;"	s	chapter:Expert Parallelism for MLX-LM MoE Models
Prerequisites	README.md	/^### Prerequisites$/;"	S	section:Expert Parallelism for MLX-LM MoE Models""Running the Code
Real Model Integration	README.md	/^### Real Model Integration$/;"	S	section:Expert Parallelism for MLX-LM MoE Models""Running the Code
Routing and Load Balancing	README.md	/^### Routing and Load Balancing$/;"	S	section:Expert Parallelism for MLX-LM MoE Models""Technical Implementation Details
Running the Code	README.md	/^## Running the Code$/;"	s	chapter:Expert Parallelism for MLX-LM MoE Models
Simple Example	README.md	/^### Simple Example$/;"	S	section:Expert Parallelism for MLX-LM MoE Models""Running the Code
Single Machine (8 GPUs)	README.md	/^### Single Machine (8 GPUs)$/;"	S	section:Expert Parallelism for MLX-LM MoE Models""Performance Projections
System Optimizations	README.md	/^### System Optimizations$/;"	S	section:Expert Parallelism for MLX-LM MoE Models""Future Work
Technical Implementation Details	README.md	/^## Technical Implementation Details$/;"	s	chapter:Expert Parallelism for MLX-LM MoE Models
__call__	expert_parallel_poc.py	/^    def __call__(self, input_ids: mx.array) -> mx.array:$/;"	m	class:ExpertParallelModel	typeref:typename:mx.array
__call__	expert_parallel_poc.py	/^    def __call__(self, x: mx.array) -> mx.array:$/;"	m	class:ParallelMoELayer	typeref:typename:mx.array
__call__	qwen3_expert_parallel.py	/^    def __call__(self, x: mx.array) -> mx.array:$/;"	m	class:ExpertParallelQwen3MoeSparseMoeBlock	typeref:typename:mx.array
__init__	expert_parallel_poc.py	/^    def __init__(self, $/;"	m	class:ParallelMoELayer
__init__	expert_parallel_poc.py	/^    def __init__(self, vocab_size: int = 32000, $/;"	m	class:ExpertParallelModel
__init__	qwen3_expert_parallel.py	/^    def __init__(self, original_moe_block, device_map: Dict[int, int], enable_analysis: bool = F/;"	m	class:ExpertParallelQwen3MoeSparseMoeBlock
_analyze_routing	qwen3_expert_parallel.py	/^    def _analyze_routing(self, expert_indices: mx.array, expert_scores: mx.array) -> Dict:$/;"	m	class:ExpertParallelQwen3MoeSparseMoeBlock	typeref:typename:Dict
_create_expert_weights	expert_parallel_poc.py	/^    def _create_expert_weights(self):$/;"	m	class:ParallelMoELayer
_expert_forward	expert_parallel_poc.py	/^    def _expert_forward(self, x: mx.array, expert_id: int) -> mx.array:$/;"	m	class:ParallelMoELayer	typeref:typename:mx.array
_parallel_expert_compute	expert_parallel_poc.py	/^    def _parallel_expert_compute(self, x: mx.array, expert_indices: mx.array, $/;"	m	class:ParallelMoELayer	typeref:typename:mx.array
_route_tokens	expert_parallel_poc.py	/^    def _route_tokens(self, x: mx.array) -> Tuple[mx.array, mx.array]:$/;"	m	class:ParallelMoELayer	typeref:typename:Tuple[mx.array,mx.array]
_simulate_parallel_processing	qwen3_expert_parallel.py	/^    def _simulate_parallel_processing(self, routing_stats: Dict):$/;"	m	class:ExpertParallelQwen3MoeSparseMoeBlock
benchmark_expert_parallel_inference	qwen3_expert_parallel.py	/^def benchmark_expert_parallel_inference():$/;"	f
benchmark_expert_parallelism	expert_parallel_poc.py	/^def benchmark_expert_parallelism():$/;"	f
checkpoint	minimal_qwen3_example.py	/^checkpoint = "mlx-community\/Qwen3-Coder-30B-A3B-Instruct-4bit"$/;"	v
checkpoint	model_analysis.py	/^checkpoint = "mlx-community\/Qwen3-Coder-30B-A3B-Instruct-4bit"$/;"	v
conversation	minimal_qwen3_example.py	/^conversation = [{"role": "user", "content": prompt}]$/;"	v
create_expert_device_mapping	qwen3_expert_parallel.py	/^def create_expert_device_mapping(num_experts: int, num_devices: int) -> Dict[int, int]:$/;"	f	typeref:typename:Dict[int,int]
demonstrate_load_balancing	qwen3_expert_parallel.py	/^def demonstrate_load_balancing():$/;"	f
demonstrate_routing_analysis	expert_parallel_poc.py	/^def demonstrate_routing_analysis():$/;"	f
embeddings	model_analysis.py	/^embeddings = model.model.embed_tokens(test_input)$/;"	v
gate_proj	model_analysis.py	/^        gate_proj = moe_layer.switch_mlp.gate_proj$/;"	v
gates	model_analysis.py	/^    gates = moe_layer.gate(test_tensor)$/;"	v
gates_softmax	model_analysis.py	/^    gates_softmax = mx.softmax(gates, axis=-1)$/;"	v
k	model_analysis.py	/^    k = moe_layer.top_k$/;"	v
layer	model_analysis.py	/^    layer = model.model.layers[i]$/;"	v
mlp_layers	model_analysis.py	/^mlp_layers = []$/;"	v
model	minimal_qwen3_example.py	/^model, tokenizer = load(path_or_hf_repo=checkpoint)$/;"	v
model	model_analysis.py	/^model, tokenizer = load(path_or_hf_repo=checkpoint)$/;"	v
moe_layer	model_analysis.py	/^    moe_layer = model.model.layers[moe_layer_idx].mlp$/;"	v
moe_layer_idx	model_analysis.py	/^    moe_layer_idx = moe_layers[0]$/;"	v
moe_layers	model_analysis.py	/^moe_layers = []$/;"	v
mx	expert_parallel_poc.py	/^import mlx.core as mx$/;"	I	nameref:module:mlx.core
mx	minimal_qwen3_example.py	/^import mlx.core as mx$/;"	I	nameref:module:mlx.core
mx	model_analysis.py	/^import mlx.core as mx$/;"	I	nameref:module:mlx.core
mx	qwen3_expert_parallel.py	/^import mlx.core as mx$/;"	I	nameref:module:mlx.core
nn	expert_parallel_poc.py	/^import mlx.nn as nn$/;"	I	nameref:module:mlx.nn
nn	qwen3_expert_parallel.py	/^import mlx.nn as nn$/;"	I	nameref:module:mlx.nn
np	expert_parallel_poc.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	model_analysis.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	qwen3_expert_parallel.py	/^import numpy as np$/;"	I	nameref:module:numpy
patch_model_with_expert_parallelism	qwen3_expert_parallel.py	/^def patch_model_with_expert_parallelism(model, num_devices: int = 4, enable_analysis: bool = Fal/;"	f
prompt	minimal_qwen3_example.py	/^prompt = "Write a Python function to calculate fibonacci numbers."$/;"	v
prompt	minimal_qwen3_example.py	/^prompt = tokenizer.apply_chat_template($/;"	v
response	minimal_qwen3_example.py	/^response = generate($/;"	v
test_input	model_analysis.py	/^test_input = mx.array([[1, 2, 3, 4, 5]])  # Simple test tokens$/;"	v
test_tensor	model_analysis.py	/^    test_tensor = mx.random.normal((1, 5, model.args.hidden_size))$/;"	v
tokenizer	minimal_qwen3_example.py	/^model, tokenizer = load(path_or_hf_repo=checkpoint)$/;"	v
tokenizer	model_analysis.py	/^model, tokenizer = load(path_or_hf_repo=checkpoint)$/;"	v
topk_values	model_analysis.py	/^    topk_values = mx.topk(gates_softmax, k=k, axis=-1)$/;"	v
